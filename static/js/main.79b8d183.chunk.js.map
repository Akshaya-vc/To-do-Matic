{"version":3,"sources":["components/Todo.js","components/Form.js","components/FilterBtn.js","App.js","index.js"],"names":["Todo","props","useState","isEditing","setEditing","newName","setNewName","editFieldRef","useRef","editButtonRef","wasEditing","value","ref","useEffect","current","usePrevious","focus","editingTemplate","className","htmlFor","id","name","onChange","e","target","type","onClick","preventDefault","editTask","viewTemplate","defaultChecked","completed","toggleTaskCompleted","deleteTask","Form","setName","handleSubmit","addTask","onSubmit","autoComplete","FilterBtn","setFilter","aria-pressed","isPressed","FILTER_MAP","All","Active","task","Completed","FILTER_NAMES","Object","keys","App","listHeadingRef","tasks","setTasks","remainingTasks","filter","editedTaskList","map","updatedTasks","filterList","taskList","noun","length","countingText","prevTaskLength","newTask","nanoid","tabIndex","role","aria-labelledby","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.79b8d183.chunk.js","sourcesContent":["import React, { useState, useRef , useEffect } from \"react\";\r\n\r\n\r\nfunction usePrevious(value) {\r\n  const ref = useRef();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref.current;\r\n}\r\n\r\nexport default function Todo(props) {\r\n  const [isEditing, setEditing] = useState(!true);\r\n  const [newName, setNewName] = useState(\"\");\r\n  const editFieldRef = useRef(null);\r\n  const editButtonRef = useRef(null);\r\n  \r\n  const wasEditing = usePrevious(isEditing);\r\n  useEffect(() => {\r\n    if(!wasEditing && isEditing){\r\n      editFieldRef.current.focus();\r\n    }\r\n    if(wasEditing && !isEditing){\r\n      editButtonRef.current.focus();\r\n    }\r\n  },[wasEditing,isEditing]);\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    if (newName !== \"\") props.editTask(props.id, newName);\r\n    setNewName(\"\");\r\n    setEditing(false);\r\n  }\r\n  function handleChange(e) {\r\n    setNewName(e.target.value);\r\n  }\r\n\r\n  const editingTemplate = (\r\n    <form className=\"stack-small\">\r\n      <div className=\"form-group\">\r\n        <label className=\"todo-label\" htmlFor={props.id}>\r\n          New name for {props.name}\r\n        </label>\r\n        <input\r\n          onChange={handleChange}\r\n          ref={editFieldRef}\r\n          id={props.id}\r\n          className=\"todo-text\"\r\n          type=\"text\"\r\n        />\r\n      </div>\r\n      <div className=\"btn-group\">\r\n        <button\r\n          onClick={() => setEditing(false)}\r\n          type=\"button\"\r\n          className=\"btn todo-cancel\"\r\n        >\r\n          Cancel\r\n          <span className=\"visually-hidden\">renaming {props.name}</span>\r\n        </button>\r\n        <button\r\n          onClick={handleSubmit}\r\n          type=\"submit\"\r\n          className=\"btn btn__primary todo-edit\"\r\n        >\r\n          Save\r\n          <span className=\"visually-hidden\">new name for {props.name}</span>\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n  const viewTemplate = (\r\n    <div className=\"stack-small\">\r\n      <div className=\"c-cb\">\r\n        <input\r\n          id={props.id}\r\n          type=\"checkbox\"\r\n          defaultChecked={props.completed}\r\n          onChange={() => props.toggleTaskCompleted(props.id)}\r\n        />\r\n        <label className=\"todo-label\" htmlFor={props.id}>\r\n          {props.name}\r\n        </label>\r\n      </div>\r\n      <div className=\"btn-group\">\r\n        <button\r\n          onClick={() => setEditing(true)}\r\n          ref={editButtonRef}\r\n          type=\"button\"\r\n          className=\"btn\"\r\n        >\r\n          Edit <span className=\"visually-hidden\">{props.name}</span>\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn__danger\"\r\n          onClick={() => props.deleteTask(props.id)}\r\n        >\r\n          Delete <span className=\"visually-hidden\">{props.name}</span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n   useEffect(() => {\r\n     if(isEditing){\r\n       editFieldRef.current.focus();\r\n     }\r\n     \r\n   },[isEditing]);\r\n\r\n  return (\r\n    <li className=\"todo stack-small\">\r\n      {isEditing ? editingTemplate : viewTemplate}\r\n    </li>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\n\r\n\r\n\r\nexport default function Form(props) {\r\n  const [name,setName] = useState('');\r\n  //can we have more than one useState in a component?\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    if(name!=='')\r\n    props.addTask(name);\r\n    setName('');\r\n  }\r\n  function handleChange(e){\r\n    setName(e.target.value);\r\n  }\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <h2 className=\"label-wrapper\">\r\n        <label htmlFor=\"new-todo-input\" className=\"label__lg\">\r\n          What needs to be done?\r\n        </label>\r\n      </h2>\r\n      <input\r\n        type=\"text\"\r\n        id=\"new-todo-input\"\r\n        className=\"input input__lg\"\r\n        name=\"text\"\r\n        autoComplete=\"off\"\r\n        value={name}\r\n        onChange={handleChange}\r\n      />\r\n      <button type=\"submit\" onClick={handleSubmit} className=\"btn btn__primary btn__lg\">\r\n        Add\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n","import React from \"react\";\r\nfunction FilterBtn(props) {\r\n  return (\r\n    <button onClick={() => props.setFilter(props.name)} type=\"button\" className=\"btn toggle-btn\" aria-pressed={props.isPressed}>\r\n      <span className=\"visually-hidden\">Show </span>\r\n      <span>{props.name}</span>\r\n      <span className=\"visually-hidden\"> tasks</span>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default FilterBtn;\r\n","import React, { useState , useRef, useEffect } from \"react\";\nimport Todo from \"./components/Todo\";\nimport Form from \"./components/Form\";\nimport FilterBtn from \"./components/FilterBtn\";\nimport { nanoid } from \"nanoid\";\n\nconst FILTER_MAP = {\n  All: () => true,\n  Active: (task) => !task.completed,\n  Completed: (task) => task.completed,\n};\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\n\n\nfunction usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nfunction App(props) {\n\n\n  const  listHeadingRef = useRef(null);\n\n  const [tasks, setTasks] = useState(props.tasks);\n  \n  function addTask(name) {\n    const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };\n    setTasks([...tasks, newTask]);\n    //creates new tasks for all values inside tasks\n    //It spreads all of its inside value\n    //same as tasks.0 task.1 tasks.2\n  }\n  function deleteTask(id) {\n    //console.log(id);\n    const remainingTasks = tasks.filter((task) => id !== task.id);\n    setTasks(remainingTasks);\n  }\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map((task) => {\n      if (id === task.id) {\n        return { ...task, name: newName };\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return {...task, completed: !task.completed}\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n  const [filter, setFilter] = useState(\"All\");\n  const filterList = FILTER_NAMES.map((name) => (\n    <FilterBtn \n      key={name} \n      name={name} \n      isPressed = {name === filter}\n      setFilter = {setFilter}\n    />\n  ));\n  //console.log(tasks);\n  const taskList = tasks.filter(FILTER_MAP[filter]).map((task) => (\n    <Todo\n      id={task.id}\n      name={task.name}\n      completed={task.completed}\n      key={task.id}\n      toggleTaskCompleted={toggleTaskCompleted}\n      deleteTask={deleteTask}\n      editTask={editTask}\n    />\n  ));\n  //console.log(tasks);\n  //each item of tasks is task.\n  //map 1.takes a data item unbundles it,\n  //2.performs whatever operation given after map(item => (operation here))\n  //3.returns a new data item of same type\n  const noun = taskList.length === 1 ? \"task\" : \"tasks\";\n  const countingText = `${taskList.length} ${noun} remaining`;\n\n  const prevTaskLength = usePrevious(tasks.length);\n\n  useEffect(() => {\n    if(tasks.length - prevTaskLength === -1){\n      listHeadingRef.current.focus();\n    }\n  }, [tasks.length, prevTaskLength]);\n  return (\n    <div className=\"todoapp stack-large\">\n      <h1>TodoMatic</h1>\n      <Form addTask={addTask} />\n      <div className=\"filters btn-group stack-exception\">{filterList}</div>\n      <h2 tabIndex=\"-1\" ref={listHeadingRef} id=\"list-heading\">{countingText}</h2>\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        {taskList}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nconst DATA = [\n  { name: \"Eat\", completed: true, id: \"todo-0\" },\n  { name: \"Sleep\", completed: false, id: \"todo-1\" },\n  { name: \"Repeat\", completed: false, id: \"todo-2\" },\n];\n\nReactDOM.render(<App tasks={DATA} />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}